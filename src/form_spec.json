[
  {
    "formId": "enrollment",
    "endFormSuccessMessage": "Success",
    "endFormFailureMessage": "Fail",
    "onSubmit": "() =>\n  fetch(submissionUrl, {\n    method: 'POST',\n    cache: 'no-cache',\n    headers: HEADERS,\n    signal: controller.signal,\n    body: JSON.stringify(formData),\n  })\n    .then(async (response) => {\n      const resData = await response.json();\n      console.log('ressss', resData);\n      if (resData.trainee.length > 0) {\n        console.log('call if');\n        traineeData = resData.trainee[0];\n        const message = JSON.stringify({\n          message: resData.trainee[0],\n          date: Date.now(),\n          channel: 'enketo',\n        });\n        localStorage.setItem('industryId', resData.trainee[0].industry);\n        localStorage.setItem('traineeId', resData.trainee[0].id);\n        window.parent.postMessage(message, '*');\n      }\n\n      console.log('traineeData-----', traineeData);\n      /** @type { UploadBatchResult } */\n      let result = {\n        status: response.status,\n        failedFiles: recordBatch.failedFiles\n          ? recordBatch.failedFiles\n          : undefined,\n        isValid: resData.trainee.length > 0,\n      };\n      if (response.status === 400) {\n        // 400 is a generic error. Any message returned by the server is probably more useful.\n        // Other more specific statusCodes will get hardcoded and translated messages.\n        return response.text().then((text) => {\n          const xmlResponse = parser.parseFromString(text, 'text/xml');\n          if (xmlResponse) {\n            const messageEl = xmlResponse.querySelector(\n              'OpenRosaResponse > message',\n            );\n            if (messageEl) {\n              result.message = messageEl.textContent;\n            }\n          }\n          throw result;\n        });\n      } else if (response.status !== 201 && response.status !== 202) {\n        console.log('call else if');\n        return result;\n      } else {\n        return result;\n      }\n    })\n    .catch((error) => {\n      if (error.name === 'AbortError' && typeof error.status === 'undefined') {\n        error.status = 408;\n      }\n      throw error;\n    })",
    "triggers": [
      {
        "desc": "Checks if the user consent is given",
        "name": "CheckIfConsentPresent",
        "checks": {
          "_and": [
            {
              "keyName": "consent",
              "value": "yes",
              "operator": "_eq"
            },
            {
              "keyName": "consent",
              "value": "yes",
              "operator": "_eq"
            }
          ]
        }
      }
    ]
  }
]
